name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      api-image: ${{ steps.api-image.outputs.image }}
      web-image: ${{ steps.web-image.outputs.image }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Extract metadata for API
      id: api-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api
        tags: |
          type=ref,event=branch
          type=sha,prefix=staging-
    
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/api.Dockerfile
        push: true
        tags: ${{ steps.api-meta.outputs.tags }}
        labels: ${{ steps.api-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Extract metadata for Web
      id: web-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web
        tags: |
          type=ref,event=branch
          type=sha,prefix=staging-
    
    - name: Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/web.Dockerfile
        push: true
        tags: ${{ steps.web-meta.outputs.tags }}
        labels: ${{ steps.web-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Set image outputs
      id: api-image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:staging-${{ github.sha }}" >> $GITHUB_OUTPUT
    
    - name: Set web image output
      id: web-image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:staging-${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging server
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_USER: ${{ secrets.STAGING_USER }}
        STAGING_KEY: ${{ secrets.STAGING_SSH_KEY }}
        API_IMAGE: ${{ needs.build-and-push.outputs.api-image }}
        WEB_IMAGE: ${{ needs.build-and-push.outputs.web-image }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$STAGING_KEY" > ~/.ssh/staging_key
        chmod 600 ~/.ssh/staging_key
        
        # Copy deployment scripts
        scp -i ~/.ssh/staging_key -o StrictHostKeyChecking=no \
          scripts/deployment/deploy.sh \
          docker/docker-compose.staging.yml \
          $STAGING_USER@$STAGING_HOST:/opt/aios/
        
        # Run deployment
        ssh -i ~/.ssh/staging_key -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST << EOF
          cd /opt/aios
          export API_IMAGE=$API_IMAGE
          export WEB_IMAGE=$WEB_IMAGE
          ./deploy.sh staging
        EOF
    
    - name: Run smoke tests
      run: |
        sleep 30  # Wait for services to start
        curl -f https://staging.aios.example.com/health || exit 1
        curl -f https://staging.aios.example.com/api/health || exit 1
    
    - name: Notify deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Staging deployment ${{ job.status }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}